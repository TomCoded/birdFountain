(C)  Tom White

Scene/demo contains a number of sample programs.  Run ". demo" in the root
directory when you want to see them, hitting the 'q' key, or quitting
from the menu, between scenes.

--------------------------------------------------

Features:

There is a "Reload file" option on the menu, to reload the current file.

Keystroke reference:
  's':  Toggles pause state
  'f':  Outputs a single frame.  Useful when paused.
  'i':  Zooms in
  'o':  Zooms out
  'r'/'l'/'u'/'d':  Pans right/left/up/down
  't'/'T': roll left/right
  'y'/'Y': roll left/right
  'P'/'p': pitch up/down
  'q': quit

Speed can be adjusted "Slower" or "Faster" instead of simply being
slow and fast.  It is at fastest speed by default.  These can be
chosen from the menu.

The following additional shapes are supported:
 cube <size>
 icosahedron
 octahedron
 tetrahedron
 dodecahedron
 cone (<radius>,<height>,<slices>,<stacks>)

There is support for wireframe objects:
 wireframe on //objects after this, but with no interceding wireframe
  //off command, are rendered as wireframe.
 wireframe off //objects after this, but with no interceding wireframe
  //on command, are renderered as solid.  Default setting.

 //Note: objects remain as wireframe if they are created that way;
  //wireframe on will make no difference before insertcustom

sintranslation (translation,amplitude,start,velocity)
  translation = Point3Dd of the translation to make.
  amplitude = amplitude of the sin wave
  start = starting location (in degrees) of the oscillation
  velocity = degrees per frame

sinspin (axis, amplitude, start, velocity)
 axis = axis of spin;
 amplitude = amplitude of the sin wave
 start = starting location (in degrees) of the oscillation
 velocity = degrees per frame

custom //begin defining custom object
endcustom <name> 
  This creates a user defined object, with name <name> (no brackets)

insertcustom <name>  
  This will insert a user-defined custom object as specified above.

include <filename>
  This will include the file <filename>

The following include nodes have been created:
  Scene/include/formulae.cus  
   //includes formulae for figure eights & circles
  Scene/include/gravity.cus
   //includes formulae for gravity
  Scene/include/woodpecker.cus
   //includes woodpecker shape
  Scene/include/trileg.cus
   //a box oscillator
  Scene/include/mats.cus
   //a bunch of material types

P(t) <x(t)> <y(t)> <x(t)> <dt/df> <t_0> <tWrap>
  This creates a translation to the position specifed by x(t), y(t),
z(t), where they are specified with expressions as described where the
parser is mentioned in this file.  dt/df is the change in time per
frame, and t_0 is the initial time.  Set tWrap to 0 for no wrapping
behavior, or set tWrap to a value t_max; when t reaches t_max, it will
be reset to 0 and climb again.  t is in radians for sin & cos

orient(t) <axis> <x(t)> <y(t)> <z(t)> <dt/df> <t_0> <tWrap>
  This creates a an orientation shift from <axis> to the axis
specified.

matrix(t) <M0,0(t)>...<M3,3(t)> <dt/df> <t_0> <tWrap>
  This allows you to enter a custom matrix, in column major order, where each entry may be a function of t.  ex:

matrix(t) sin(t) 0 0 0 0 sin(t) 0 0 0 0 sin(t) 0 0 0 0 1 0.01 0 6.28

This will put a matrix on the stack that scales by sin(t), where t starts at zero and the change in time per frame is 0.01.  When the time reaches or exceeds 6.28, the time will reset itself to zero.

Project directory contains:

These files were provided by Bill for the project.  They have not been
touched.
----------
Camera
TransformMaker
Ray
Makefile
include.mak

Contains some global define statements
------
Defs.h

These are the function classes.  A FunNode is an expression, which can
be a trigonometric function (sin or cos) of a child FunNode, a double,
a multiplication, addition, or division operation on two nodes, or a
variable t.  Legal expressions are parsed by the FunParser class.
Examples of legal expressions include:
	2*t^2	1+17*(sin(2+t)-cos(2+t))
	1*(0-1)
Note that the leading character cannot be a '-' sign.
-------
FunNode
DivFunNode
CosFunNode
FunParser
NumFunNode
PowFunNode
SinFunNode
SumFunNode
VarFunNode
MultFunNode

These guys will translate a function based on a given input, as
specified in the features section of this file.
--------------
FunTranslateNodeGL
FunOrientNodeGL

this file
-------
README

Reads input files and sets up the scene
-----
Scene

Holds directional or positional lights
-----------
LightNodeGL

The nodeGLs
-----------
NodeGL - parent virtual class
ConeNodeGL
CubeNodeGL
DodecahedronNodeGL
IcosahedronNodeGL
IdentityNodeGL
MaterialNodeGL
OctahedronNodeGL
OrbitNodeGL
OrientNodeGL
PlanetNodeGL
PopNodeGL
RotateNodeGL
SpinNodeGL
TeapotNodeGL
TetrahedronNodeGL
TorusNodeGL
TransformNodeGL
TranslationFormNodeGL
SinSpinNodeGL
SinTranslateNodeGL

handles custom items that the user creates
-----------
CustomNodeGL

the glut callback functions, and a few other helpers
---------------------------
functions

Building
---------------
gmake in the project root will make all classes.
. retry in the Scene directory will remake the SceneTest file



